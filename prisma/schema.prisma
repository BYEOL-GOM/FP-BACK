// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId   Int    @id @default(autoincrement()) @map("userId")
  nickname String @map("nickname")
  fruit    Int    @default(0) @map("fruit")

  worries  Worries[]
  likes    Likes[]
  comments Comments[]
  bookmark   Bookmark[]
}

model Worries {
  worryId     Int       @id @default(autoincrement()) @map("worryId")
  authorId    Int       @map("authorId")
  content     String    @db.Text @map("content")
  createdAt   DateTime  @default(now()) @map("createdAt")
  endAt       DateTime? @map("endAt")
  icon        Icon? @map("icon")

  userId      Int
  user        Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  comments    Comments[] // 이 걱정에 달린 댓글들
  likes       Likes[]    // 이 걱정에 대한 좋아요
}

enum Icon{
  A
  B
  C
  D
}

model Comments {
  commentId Int      @id @default(autoincrement()) @map("commentId")
  content   String   @db.Text  @map("content")
  createdAt DateTime @default(now())  @map("createdAt")
  updatedAt DateTime @default(now())  @map("updatedAt")
  
  parentId  Int?     
  parent    Comments? @relation("CommentHierarchy", fields: [parentId], references: [commentId])
  children  Comments[] @relation("CommentHierarchy")

  authorId  Int
  author    Users     @relation(fields: [authorId], references: [userId])

  worryId    Int
  worry      Worries  @relation(fields: [worryId], references: [worryId])

  likes      Likes[]
  bookmark   Bookmark[]
}


model Likes {
  likeId    Int       @id @default(autoincrement())  @map("likeId")
  checkLike Boolean   @default(false)  @map("checkLike")

  userId    Int
  user      Users     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  commentId Int
  comment   Comments  @relation(fields: [commentId], references: [commentId], onDelete: Cascade)

  worryId   Int
  worry     Worries   @relation(fields: [worryId], references: [worryId])
}


model Bookmark {
  bookmarkId Int      @id @default(autoincrement()) @map("bookmarkId")
  createdAt  DateTime @default(now()) @map("createdAt")

  userId     Int
  user     Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  commentId  Int
  comment  Comments @relation(fields: [commentId], references: [commentId], onDelete: Cascade)

  @@unique([userId, commentId])
}