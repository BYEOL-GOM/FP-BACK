// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId        Int      @id @default(autoincrement())
  userCheckId   String
  nickname      String
  email         String?
  fruit         Int     @default(0)
  remainingWorries Int @default(5)            // 최대 고민작성 가능 개수 5개
  remainingAnswers Int @default(5)            // 답변 가능 개수 5개
  remainingStars  Int      @default(0)        // 별의 개수 
  planet          PlanetType  @default(A)
  darkMode          Boolean   @default(true)  // 다크모드 사용 여부

  worry         Worries[]
  reports       Reports[]  // 신고
  comments      Comments[]
  likesSent     Likes[]   @relation("LikeSender")         // 선물을 보낸 사람
  planetHistory PlanetBuyHistory[]

  sentChattings Chattings[] @relation("SentChattings")    // 보낸 채팅 메시지들
}

enum PlanetType {
  A
  B
  C
  D
}


model Worries {
  worryId               Int       @id @default(autoincrement()) @map("worryId")
  commentAuthorId       Int       @map("commentAuthorId")

  content               String    @db.Text @map("content")
  fontColor             String?   @map("fontColor")
  createdAt             DateTime  @default(now()) @map("createdAt")
  updatedAt             DateTime? @map("updatedAt") 
  deletedAt             DateTime? @map("deletedAt")                    // 소프트 삭제 

  icon                  Icon?     @map("icon")
  unRead                Boolean   @default(true)  @map("unRead")       // 아직 안읽음

  isSolved              Boolean   @default(false)                      // 고민이 해결됐는지에 대한 여부 확인
  reportReason          String?       @map("reportReason")             // 신고 이유

  // 고민을 등록한 유저(선물을 보냄)
  userId      Int?       @map("userId")
  user        Users?    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  comments    Comments[]                                               // 고민에 달린 댓글들
  reports     Reports[]                                                // 신고
  
  // 해결된 답변
  solvingCommentId Int?       @unique @map("solvingCommentId")
  solvingComment   Comments?  @relation("SolvingComment", fields: [solvingCommentId], references: [commentId])

  // Worries와 Rooms 간의 1:1 관계 설정
  room          Rooms?
}

enum Icon{
  A
  B
  C
}

model Comments {
  commentId    Int           @id @default(autoincrement()) @map("commentId")
  content      String        @db.Text           @map("content")
  createdAt    DateTime      @default(now())    @map("createdAt")
  deletedAt    DateTime?                        @map("deletedAt")              // 소프트 삭제
  fontColor             String?                 @map("fontColor")
  unRead              Boolean   @default(true)  @map("unRead")                 // 아직 안읽음

  reportReason          String?                 @map("reportReason")          // 신고 이유
  
  parentId  Int?     
  parent    Comments? @relation("CommentHierarchy", fields: [parentId], references: [commentId]) // 댓글 계층
  children  Comments[] @relation("CommentHierarchy")

  userId  Int
  user    Users     @relation(fields: [userId], references: [userId])

  worryId    Int
  worry      Worries  @relation(fields: [worryId], references: [worryId])

  likes       Likes[]
  reports     Reports[]                                               // 신고

  // 해결된 답변
  solvingWorryId Int?
  solvingWorry Worries? @relation("SolvingComment")
}

model Likes {
  likeId      Int       @id @default(autoincrement())  @map("likeId")

  // 선물 보낸 사람
  userId      Int
  user        Users     @relation("LikeSender", fields: [userId], references: [userId], onDelete: Cascade)

  // 좋아요가 적용되는 대상 (댓글)
  commentId   Int?
  comment     Comments? @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
}


// 금지어
model BannedWords {
  bannedWordId         Int      @id @default(autoincrement()) @map("bannedWordId")
  word       String   @unique  @map("word")
  createdAt  DateTime @default(now())  @map("createdAt")
}

// 신고
model Reports {            
  reportId    Int      @id @default(autoincrement())
  reason      String                                                      // 신고 이유
  reportedAt  DateTime @default(now())                                    // 신고된 날짜
  
  // 신고된 내용의 작성자
  userId      Int
  user        Users    @relation(fields: [userId], references: [userId])

  // 고민이 신고된 경우
  worryId     Int?     
  worry       Worries? @relation(fields: [worryId], references: [worryId])

  // 답변이 신고된 경우
  commentId   Int?     
  comment     Comments? @relation(fields: [commentId], references: [commentId])
}

model PlanetBuyHistory {
  HistoryId Int             @id @default(autoincrement())
  userId    Int
  user      Users           @relation(fields: [userId], references: [userId])
  planetType PlanetType     @default(A)
}


// 채팅방
model Rooms {
  roomId      Int       @id @default(autoincrement())
  status      RoomStatus  @default(PENDING) @map("status")  // Enum 타입으로 상태 관리
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  worryId     Int       @unique
  worry       Worries   @relation(fields: [worryId], references: [worryId])

  userId          Int       // 고민을 등록한 사용자 ID
  commentAuthorId Int       // 댓글 작성자 ID

  chattings   Chattings[]   // 채팅 메시지
}
enum RoomStatus {
  PENDING   // 요청중
  ACCEPTED  // 승인됨
  REJECTED  // 거절됨
}

// 채팅
model Chattings {
  chatId      Int      @id @default(autoincrement())
  text        String
  createdAt   DateTime @default(now())

  // 메시지가 속한 채팅방
  roomId      Int
  room        Rooms     @relation(fields: [roomId], references: [roomId])

  // 메시지를 보낸 사용자
  senderId    Int
  sender      Users     @relation("SentChattings", fields: [senderId], references: [userId])
}