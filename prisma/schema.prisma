// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId        Int      @id @default(autoincrement())
  userCheckId   String
  nickname      String
  email         String
  fruit         String?

  worry Worries[]
  comments  Comments[]
  likesSent     Likes[] @relation("LikeSender")     // 선물을 보낸 사람 
}


model Worries {
  worryId               Int       @id @default(autoincrement()) @map("worryId")
  commentAuthorId       Int       @map("commentAuthorId")

  content               String    @db.Text @map("content")
  fontColor             String?   @map("fontColor")
  createdAt             DateTime  @default(now()) @map("createdAt")
  icon                  Icon?     @map("icon")
  lastReplyTime         DateTime?                                      // 답변이 도착한 시간
  deletedAt             DateTime? @map("deletedAt")                    // 소프트 삭제를 위한  
  isSolved              Boolean   @default(false)                      // 고민이 해결됐는지에 대한 여부 확인
  isReWorry             Boolean   @default(false)                      // 재고민 여부 확인

  // 고민을 등록한 유저(선물을 보냄)
  userId      Int?       @map("userId")
  user        Users?    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  comments    Comments[] // 이 걱정에 달린 댓글들
  
  // 해결된 답변
  solvingCommentId Int?       @unique @map("solvingCommentId")
  solvingComment   Comments?  @relation("SolvingComment", fields: [solvingCommentId], references: [commentId])
}

enum Icon{
  A
  B
  C
}


model Comments {
  commentId Int      @id @default(autoincrement()) @map("commentId")
  content   String   @db.Text  @map("content")
  createdAt DateTime @default(now())  @map("createdAt")
  updatedAt DateTime @default(now())  @map("updatedAt")
  fontColor             String?   @map("fontColor")

  
  parentId  Int?     
  parent    Comments? @relation("CommentHierarchy", fields: [parentId], references: [commentId]) // 댓글 계층
  children  Comments[] @relation("CommentHierarchy")

  userId  Int
  user    Users     @relation(fields: [userId], references: [userId])

  worryId    Int
  worry      Worries  @relation(fields: [worryId], references: [worryId])

  likes      Likes[]

  // 해결된 답변
  solvingWorryId Int?
  solvingWorry Worries? @relation("SolvingComment")
}

model Likes {
  likeId      Int       @id @default(autoincrement())  @map("likeId")

  // 선물 보낸 사람
  userId      Int
  user        Users     @relation("LikeSender", fields: [userId], references: [userId], onDelete: Cascade)

  // 좋아요가 적용되는 대상 (댓글)
  commentId   Int?
  comment     Comments? @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
}