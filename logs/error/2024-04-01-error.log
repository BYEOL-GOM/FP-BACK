{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-31T15:01:15.318Z"}
{"level":"error","message":"Error Status: 403, Message: 선물을 보낼 권한이 없습니다. 게시글의 작성자만 선물을 보낼 수 있습니다.","timestamp":"2024-04-01T00:52:22.601Z"}
{"level":"error","message":"Error Status: 400, Message: Expected ',' or '}' after property value in JSON at position 13","timestamp":"2024-04-01T01:33:20.030Z"}
{"level":"error","message":"Error Status: undefined, Message: Invalid status code: { message: '고민이 등록되었습니다' }","timestamp":"2024-04-01T01:50:43.931Z"}
{"level":"error","message":"Error Status: undefined, Message: Invalid status code: { message: '고민이 등록되었습니다' }","timestamp":"2024-04-01T01:50:48.881Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-04-01T02:32:09.084Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패worryRepository.checkExistingWorry is not a function","timestamp":"2024-04-01T05:15:28.757Z"}
{"level":"error","message":"Error Status: undefined, Message: remainingWorries is not defined","timestamp":"2024-04-01T06:38:33.866Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot read properties of undefined (reading 'worryId')","timestamp":"2024-04-01T06:39:22.816Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot read properties of undefined (reading 'worryId')","timestamp":"2024-04-01T06:39:25.198Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot read properties of undefined (reading 'worryId')","timestamp":"2024-04-01T06:40:15.351Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot read properties of undefined (reading 'worryId')","timestamp":"2024-04-01T06:40:16.635Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패더 이상 고민을 작성할 수 없습니다.","timestamp":"2024-04-01T06:40:52.863Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot read properties of undefined (reading 'worryId')","timestamp":"2024-04-01T06:41:16.789Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot read properties of undefined (reading 'worryId')","timestamp":"2024-04-01T06:41:32.878Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패\nInvalid `prisma.users.findUnique()` invocation:\n\n{\n  where: {\n    userId: undefined,\n?   AND?: UsersWhereInput | UsersWhereInput[],\n?   OR?: UsersWhereInput[],\n?   NOT?: UsersWhereInput | UsersWhereInput[],\n?   userCheckId?: StringFilter | String,\n?   nickname?: StringFilter | String,\n?   email?: StringFilter | String,\n?   fruit?: StringNullableFilter | String | Null,\n?   remainingWorries?: IntFilter | Int,\n?   worry?: WorriesListRelationFilter,\n?   comments?: CommentsListRelationFilter,\n?   likesSent?: LikesListRelationFilter\n  }\n}\n\nArgument `where` of type UsersWhereUniqueInput needs at least one of `userId` arguments. Available options are marked with ?.","timestamp":"2024-04-01T06:42:14.952Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패\nInvalid `prisma.users.findUnique()` invocation:\n\n{\n  where: {\n    userId: undefined,\n?   AND?: UsersWhereInput | UsersWhereInput[],\n?   OR?: UsersWhereInput[],\n?   NOT?: UsersWhereInput | UsersWhereInput[],\n?   userCheckId?: StringFilter | String,\n?   nickname?: StringFilter | String,\n?   email?: StringFilter | String,\n?   fruit?: StringNullableFilter | String | Null,\n?   remainingWorries?: IntFilter | Int,\n?   worry?: WorriesListRelationFilter,\n?   comments?: CommentsListRelationFilter,\n?   likesSent?: LikesListRelationFilter\n  }\n}\n\nArgument `where` of type UsersWhereUniqueInput needs at least one of `userId` arguments. Available options are marked with ?.","timestamp":"2024-04-01T06:43:17.823Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패\nInvalid `prisma.users.findUnique()` invocation:\n\n{\n  where: {\n    userId: undefined,\n?   AND?: UsersWhereInput | UsersWhereInput[],\n?   OR?: UsersWhereInput[],\n?   NOT?: UsersWhereInput | UsersWhereInput[],\n?   userCheckId?: StringFilter | String,\n?   nickname?: StringFilter | String,\n?   email?: StringFilter | String,\n?   fruit?: StringNullableFilter | String | Null,\n?   remainingWorries?: IntFilter | Int,\n?   worry?: WorriesListRelationFilter,\n?   comments?: CommentsListRelationFilter,\n?   likesSent?: LikesListRelationFilter\n  }\n}\n\nArgument `where` of type UsersWhereUniqueInput needs at least one of `userId` arguments. Available options are marked with ?.","timestamp":"2024-04-01T06:47:27.269Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패더 이상 고민을 작성할 수 없습니다.","timestamp":"2024-04-01T06:52:14.890Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패 더 이상 고민을 작성할 수 없습니다.","timestamp":"2024-04-01T06:52:29.904Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패 더 이상 고민을 작성할 수 없습니다.","timestamp":"2024-04-01T06:52:31.657Z"}
{"level":"error","message":"Error Status: undefined, Message: 더 이상 고민을 작성할 수 없습니다.","timestamp":"2024-04-01T06:52:42.639Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-04-01T08:02:50.776Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-04-01T08:12:42.366Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot access 'worryUpdateResult' before initialization","timestamp":"2024-04-01T08:13:27.545Z"}
{"level":"error","message":"Error Status: 400, Message: 유효하지 않은 댓글입니다.","timestamp":"2024-04-01T08:34:42.353Z"}
{"level":"error","message":"Error Status: 403, Message: 선물을 보낼 권한이 없습니다. 게시글의 작성자만 선물을 보낼 수 있습니다.","timestamp":"2024-04-01T08:34:50.360Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-04-01T08:36:28.948Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-04-01T08:36:52.011Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-04-01T08:37:01.835Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.users.update()` invocation:\n\n{\n  where: {\n    userId: undefined,\n?   AND?: UsersWhereInput | UsersWhereInput[],\n?   OR?: UsersWhereInput[],\n?   NOT?: UsersWhereInput | UsersWhereInput[],\n?   userCheckId?: StringFilter | String,\n?   nickname?: StringFilter | String,\n?   email?: StringFilter | String,\n?   fruit?: StringNullableFilter | String | Null,\n?   remainingWorries?: IntFilter | Int,\n?   remainingAnswers?: IntFilter | Int,\n?   worry?: WorriesListRelationFilter,\n?   comments?: CommentsListRelationFilter,\n?   likesSent?: LikesListRelationFilter\n  },\n  data: {\n    remainingAnswers: {\n      increment: 1\n    }\n  }\n}\n\nArgument `where` of type UsersWhereUniqueInput needs at least one of `userId` arguments. Available options are marked with ?.","timestamp":"2024-04-01T11:25:07.561Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-04-01T11:28:43.915Z"}
{"level":"error","message":"Error Status: 403, Message: 선물을 보낼 권한이 없습니다. 게시글의 작성자만 선물을 보낼 수 있습니다.","timestamp":"2024-04-01T11:42:25.698Z"}
{"level":"error","message":"Error Status: 403, Message: 선물을 보낼 권한이 없습니다. 게시글의 작성자만 선물을 보낼 수 있습니다.","timestamp":"2024-04-01T11:42:34.572Z"}
{"level":"error","message":"Error Status: 403, Message: 선물을 보낼 권한이 없습니다. 게시글의 작성자만 선물을 보낼 수 있습니다.","timestamp":"2024-04-01T11:47:04.805Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-04-01T12:27:53.153Z"}
{"level":"error","message":"Error Status: 404, Message: 해당하는 답변의 고민 게시글이 존재하지 않습니다.","timestamp":"2024-04-01T14:42:44.231Z"}
{"level":"error","message":"Error Status: 404, Message: 해당하는 답변의 고민 게시글이 존재하지 않습니다.","timestamp":"2024-04-01T14:42:47.319Z"}
{"level":"error","message":"Error Status: 404, Message: 해당하는 답변의 고민 게시글이 존재하지 않습니다.","timestamp":"2024-04-01T14:42:50.976Z"}
{"level":"error","message":"Error Status: 404, Message: 해당하는 답변의 고민 게시글이 존재하지 않습니다.","timestamp":"2024-04-01T14:42:55.620Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.worries.findMany()` invocation:\n\n{\n  where: {\n    isSolved: true,\n    userId: \"1\"\n            ~~~\n  },\n  select: {\n    worryId: true,\n    userId: true,\n    icon: true,\n    content: true,\n    createdAt: true\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  skip: 0,\n  take: 10\n}\n\nArgument `userId`: Invalid value provided. Expected IntNullableFilter, Int or Null, provided String.","timestamp":"2024-04-01T14:43:18.832Z"}
{"level":"error","message":"Error Status: undefined, Message: page is not defined","timestamp":"2024-04-01T14:48:08.796Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.worries.count()` invocation:\n\n{\n  select: {\n    _count: {\n      select: {\n        _all: true\n      }\n    }\n  },\n  where: {\n    isSolved: true,\n    solvingComment: {\n      commentAuthorId: 1,\n      ~~~~~~~~~~~~~~~\n?     is?: CommentsWhereInput | Null,\n?     isNot?: CommentsWhereInput | Null\n    }\n  }\n}\n\nUnknown argument `commentAuthorId`. Available options are marked with ?.","timestamp":"2024-04-01T14:48:27.511Z"}
