
{"level":"error","message":"Error Status: undefined, Message: PresentService.getWorryById is not a function","timestamp":"2024-03-28T17:38:51.016Z"}
{"level":"error","message":"Error Status: undefined, Message: PresentService.getWorryById is not a function","timestamp":"2024-03-28T17:39:07.837Z"}
{"level":"error","message":"Error Status: 404, Message: 해당하는 답변의 고민 게시글이 존재하지 않습니다.","timestamp":"2024-03-28T17:43:05.358Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민 등록 실패고민등록에 실패하였습니다. \nInvalid `prisma.worries.create()` invocation:\n\n{\n  data: {\n    content: \"고민 내용1\",\n    icon: undefined,\n    userId: 1,\n    authorId: 2,\n+   commentAuthorId: Int\n  }\n}\n\nArgument `commentAuthorId` is missing.","timestamp":"2024-03-28T17:43:48.606Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    content: \"답변 원본입니다.\",\n    authorId: undefined,\n+   author: {\n+     create: UsersCreateWithoutCommentsInput | UsersUncheckedCreateWithoutCommentsInput,\n+     connectOrCreate: UsersCreateOrConnectWithoutCommentsInput,\n+     connect: UsersWhereUniqueInput\n+   }\n  }\n}\n\nArgument `author` is missing.","timestamp":"2024-03-28T17:48:44.905Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    content: \"답변 원본입니다.\",\n    authorId: undefined,\n+   author: {\n+     create: UsersCreateWithoutCommentsInput | UsersUncheckedCreateWithoutCommentsInput,\n+     connectOrCreate: UsersCreateOrConnectWithoutCommentsInput,\n+     connect: UsersWhereUniqueInput\n+   }\n  }\n}\n\nArgument `author` is missing.","timestamp":"2024-03-28T17:54:28.396Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    content: \"답변 원본입니다.\",\n    commentAuthorId: 2,\n+   author: {\n+     create: UsersCreateWithoutCommentsInput | UsersUncheckedCreateWithoutCommentsInput,\n+     connectOrCreate: UsersCreateOrConnectWithoutCommentsInput,\n+     connect: UsersWhereUniqueInput\n+   }\n  }\n}\n\nArgument `author` is missing.","timestamp":"2024-03-28T17:55:53.935Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    content: \"첫번째 답변입니다.\",\n    commentAuthorId: 2,\n+   author: {\n+     create: UsersCreateWithoutCommentsInput | UsersUncheckedCreateWithoutCommentsInput,\n+     connectOrCreate: UsersCreateOrConnectWithoutCommentsInput,\n+     connect: UsersWhereUniqueInput\n+   }\n  }\n}\n\nArgument `author` is missing.","timestamp":"2024-03-28T17:59:16.329Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    userId: 5,\n    content: \"첫번째 답변입니다.\",\n    commentAuthorId: 2,\n+   author: {\n+     create: UsersCreateWithoutCommentsInput | UsersUncheckedCreateWithoutCommentsInput,\n+     connectOrCreate: UsersCreateOrConnectWithoutCommentsInput,\n+     connect: UsersWhereUniqueInput\n+   }\n  }\n}\n\nArgument `author` is missing.","timestamp":"2024-03-28T18:00:54.330Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    userId: 5,\n    content: \"첫번째 답변입니다.\",\n    commentAuthorId: 2,\n+   author: {\n+     create: UsersCreateWithoutCommentsInput | UsersUncheckedCreateWithoutCommentsInput,\n+     connectOrCreate: UsersCreateOrConnectWithoutCommentsInput,\n+     connect: UsersWhereUniqueInput\n+   }\n  }\n}\n\nArgument `author` is missing.","timestamp":"2024-03-28T18:08:02.519Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    userId: 5,\n    content: \"첫번째 답변입니다.\",\n    commentAuthorId: 2,\n+   author: {\n+     create: UsersCreateWithoutCommentsInput | UsersUncheckedCreateWithoutCommentsInput,\n+     connectOrCreate: UsersCreateOrConnectWithoutCommentsInput,\n+     connect: UsersWhereUniqueInput\n+   }\n  }\n}\n\nArgument `author` is missing.","timestamp":"2024-03-28T18:15:43.006Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    userId: 5,\n    content: \"첫번째 답변입니다.\",\n    authorId: undefined,\n+   author: {\n+     create: UsersCreateWithoutCommentsInput | UsersUncheckedCreateWithoutCommentsInput,\n+     connectOrCreate: UsersCreateOrConnectWithoutCommentsInput,\n+     connect: UsersWhereUniqueInput\n+   }\n  }\n}\n\nArgument `author` is missing.","timestamp":"2024-03-28T18:18:22.942Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.comments.create()` invocation:\n\n{\n  data: {\n    worryId: 1,\n    userId: 5,\n    ~~~~~~\n    content: \"첫번째 답변입니다.\",\n    authorId: 2,\n?   commentId?: Int,\n?   createdAt?: DateTime,\n?   updatedAt?: DateTime,\n?   parentId?: Int | Null,\n?   solvingWorryId?: Int | Null,\n?   children?: CommentsUncheckedCreateNestedManyWithoutParentInput,\n?   likes?: LikesUncheckedCreateNestedManyWithoutCommentInput,\n?   present?: PresentsUncheckedCreateNestedManyWithoutCommentInput,\n?   solvingWorry?: WorriesUncheckedCreateNestedOneWithoutSolvingCommentInput\n  }\n}\n\nUnknown argument `userId`. Available options are marked with ?.","timestamp":"2024-03-28T18:19:28.531Z"}
{"level":"error","message":"Error Status: undefined, Message: PresentService.sendPresent is not a function","timestamp":"2024-03-28T18:29:55.871Z"}
{"level":"error","message":"Error Status: undefined, Message: PresentService.sendPresent is not a function","timestamp":"2024-03-28T18:31:38.852Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-03-28T18:57:07.283Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-03-28T18:57:13.627Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-03-28T19:00:12.886Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-03-28T19:55:04.024Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-03-28T19:56:27.834Z"}
{"level":"error","message":"Error Status: 400, Message: 이미 선물이 전송되었습니다.","timestamp":"2024-03-28T19:56:45.053Z"}

{"level":"error","message":"Error Status: undefined, Message: Request failed with status code 401","timestamp":"2024-03-29T04:40:19.636Z"}
{"level":"error","message":"Error Status: undefined, Message: Request failed with status code 401","timestamp":"2024-03-29T04:40:59.227Z"}
{"level":"error","message":"Error Status: undefined, Message: Request failed with status code 401","timestamp":"2024-03-29T04:41:34.226Z"}
{"level":"error","message":"Error Status: undefined, Message: Request failed with status code 401","timestamp":"2024-03-29T04:42:26.121Z"}
{"level":"error","message":"Error Status: undefined, Message: Request failed with status code 401","timestamp":"2024-03-29T04:46:00.303Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot destructure property 'access_token' of 'req.headers.access_token' as it is undefined.","timestamp":"2024-03-29T04:57:21.187Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot destructure property 'access_token' of 'req.headers.Access-Token' as it is undefined.","timestamp":"2024-03-29T04:57:54.655Z"}
{"level":"error","message":"Error Status: undefined, Message: Request failed with status code 401","timestamp":"2024-03-29T05:01:05.345Z"}
{"level":"error","message":"Error Status: undefined, Message: Request failed with status code 401","timestamp":"2024-03-29T05:02:16.687Z"}
{"level":"error","message":"Error Status: undefined, Message: Converting circular structure to JSON\n    --> starting at object with constructor 'ClientRequest'\n    |     property 'res' -> object with constructor 'IncomingMessage'\n    --- property 'req' closes the circle","timestamp":"2024-03-29T05:09:18.664Z"}
{"level":"error","message":"Error Status: undefined, Message: Request failed with status code 401","timestamp":"2024-03-29T07:55:34.258Z"}
{"level":"error","message":"Error Status: undefined, Message: Invalid status code: []","timestamp":"2024-03-29T07:58:33.580Z"}
{"level":"error","message":"Error Status: undefined, Message: Invalid status code: []","timestamp":"2024-03-29T07:59:12.018Z"}
{"level":"error","message":"Error Status: undefined, Message: Converting circular structure to JSON\n    --> starting at object with constructor 'ClientRequest'\n    |     property 'res' -> object with constructor 'IncomingMessage'\n    --- property 'req' closes the circle","timestamp":"2024-03-29T08:00:36.447Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.users.create()` invocation:\n\n{\n+ data: UsersCreateInput | UsersUncheckedCreateInput\n}\n\nArgument `data` is missing.","timestamp":"2024-03-29T08:17:25.373Z"}
{"level":"error","message":"Error Status: undefined, Message: Unknown authentication strategy \"kakao\"","timestamp":"2024-03-29T14:35:37.586Z"}
{"level":"error","message":"Error Status: undefined, Message: Unknown authentication strategy \"kakao\"","timestamp":"2024-03-29T14:36:22.197Z"}
{"level":"error","message":"Error Status: undefined, Message: Unknown authentication strategy \"kakao\"","timestamp":"2024-03-29T14:40:10.285Z"}
{"level":"error","message":"Error Status: undefined, Message: Unknown authentication strategy \"kakao\"","timestamp":"2024-03-29T14:52:24.188Z"}


{"level":"error","message":"Error Status: undefined, Message: res is not defined","timestamp":"2024-03-28T15:02:57.351Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.worries.findUnique()` invocation:\n\n{\n  where: {\n    worryId: 1\n  },\n  select: {\n    deletedAt: true,\n    updatedAt: true,\n    ~~~~~~~~~\n?   worryId?: true,\n?   commentAuthorId?: true,\n?   content?: true,\n?   createdAt?: true,\n?   icon?: true,\n?   lastReplyTime?: true,\n?   userId?: true,\n?   user?: true,\n?   comments?: true,\n?   likes?: true,\n?   _count?: true\n  }\n}\n\nUnknown field `updatedAt` for select statement on model `Worries`. Available options are marked with ?.","timestamp":"2024-03-28T15:09:43.397Z"}
{"level":"error","message":"Error Status: undefined, Message: worryService.deleteOldWorries is not a function","timestamp":"2024-03-28T15:15:36.863Z"}
{"level":"error","message":"Error Status: undefined, Message: worryService.deleteOldWorries is not a function","timestamp":"2024-03-28T15:19:21.771Z"}
{"level":"error","message":"Error Status: undefined, Message: worryService.deleteOldWorries is not a function","timestamp":"2024-03-28T15:19:33.853Z"}
{"level":"error","message":"Error Status: undefined, Message: 고민이 존재하지 않습니다.","timestamp":"2024-03-28T15:33:03.700Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-28T15:34:18.482Z"}

{"level":"error","message":"Error Status: undefined, Message: Failed to fetch comments: CommentRepository.getCommentDetail is not a function","timestamp":"2024-03-29T10:29:58.703Z"}
{"level":"error","message":"Error Status: undefined, Message: Failed to fetch comments: CommentRepository.getCommentDetail is not a function","timestamp":"2024-03-29T10:31:12.027Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T12:00:13.601Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T12:00:19.445Z"}
{"level":"error","message":"Error Status: 400, Message: Unexpected token '}', ...\"erId\" : \r\n}\" is not valid JSON","timestamp":"2024-03-29T12:02:32.281Z"}
{"level":"error","message":"Error Status: undefined, Message: 데이터 형식이 올바르지 않아요","timestamp":"2024-03-29T12:02:45.731Z"}
{"level":"error","message":"Error Status: 400, Message: Unexpected token '}', ...\"erId\" : \r\n}\" is not valid JSON","timestamp":"2024-03-29T12:03:15.782Z"}
{"level":"error","message":"Error Status: undefined, Message: 데이터 형식이 올바르지 않습니다","timestamp":"2024-03-29T12:05:18.585Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T12:18:42.211Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T13:52:34.334Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T13:52:36.256Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T13:52:46.057Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T13:53:10.390Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T13:53:14.432Z"}
{"level":"error","message":"Error Status: undefined, Message: Cannot set headers after they are sent to the client","timestamp":"2024-03-29T13:53:55.330Z"}


{"level":"error","message":"Error Status: undefined, Message: 데이터 형식이 올바르지 않아요","timestamp":"2024-03-29T05:27:12.303Z"}
{"level":"error","message":"Error Status: undefined, Message: 데이터 형식이 올바르지 않아요","timestamp":"2024-03-29T05:27:49.098Z"}
{"level":"error","message":"Error Status: undefined, Message: PresentRepository.getWorryById is not a function","timestamp":"2024-03-29T05:31:33.007Z"}
{"level":"error","message":"Error Status: undefined, Message: PresentRepository.getWorryById is not a function","timestamp":"2024-03-29T05:35:17.146Z"}
{"level":"error","message":"Error Status: 400, Message: Expected ',' or '}' after property value in JSON at position 19","timestamp":"2024-03-29T05:35:30.952Z"}
{"level":"error","message":"Error Status: undefined, Message: PresentRepository.getWorryById is not a function","timestamp":"2024-03-29T05:43:26.448Z"}
{"level":"error","message":"Error Status: undefined, Message: PresentRepository.getWorryById is not a function","timestamp":"2024-03-29T05:43:27.598Z"}

{"level":"error","message":"Error Status: undefined, Message: PresentService.getSolvedWorriesByUserId is not a function","timestamp":"2024-03-29T11:47:23.775Z"}
{"level":"error","message":"Error Status: undefined, Message: getSolvedWorryDetailsById is not defined","timestamp":"2024-03-29T13:34:19.923Z"}
{"level":"error","message":"Error Status: undefined, Message: \nInvalid `prisma.worries.findUnique()` invocation:\n\n{\n  where: {\n    worryId: \"24\"\n             ~~~~\n  },\n  include: {\n    comments: {\n      include: {\n        children: true\n      }\n    }\n  }\n}\n\nArgument `worryId`: Invalid value provided. Expected Int, provided String.","timestamp":"2024-03-29T14:14:54.294Z"}
