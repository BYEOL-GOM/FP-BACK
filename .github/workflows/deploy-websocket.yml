name: Deploy WebSocket Server on Push or Merge

on:
    push:
        branches:
            - dev
            - main
        paths:
            - 'src/websocket/**'
            - 'src/middlewares/**'
            - 'src/utils/**'
            - 'prisma/**'
            - 'Dockerfile.websocket'
            - '.github/workflows/deploy-websocket.yml'

jobs:
    prettier-check:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - run: yarn install --force
            - run: yarn prettier:check

    build-and-push:
        runs-on: ubuntu-latest
        needs: prettier-check
        steps:
            - uses: actions/checkout@v3
            - uses: docker/setup-buildx-action@v2
            - uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - uses: docker/build-push-action@v2
              with:
                  context: .
                  file: Dockerfile.websocket
                  push: true
                  tags: leticia0408/byeol_gom_websocket:${{ github.ref == 'refs/heads/dev' && 'websocket-dev' || 'websocket-prod' }}

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Setup environment variables
              run: |
                  if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
                    echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN_DEV }}" >> $GITHUB_ENV
                    echo "KAKAO_REDIRECT_URI=${{ secrets.DEV_KAKAO_REDIRECT_URI }}" >> $GITHUB_ENV
                    echo "DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}" >> $GITHUB_ENV
                    echo "CONTAINER_NAME=websocket-dev" >> $GITHUB_ENV
                    echo "CONTAINER_PORT=${{ secrets.DEV_PORT }}" >> $GITHUB_ENV
                    echo "NAVER_REDIRECT_URI=${{ secrets.DEV_NAVER_REDIRECT_URI }}" >> $GITHUB_ENV
                  else
                    echo "NODE_ENV=production" >> $GITHUB_ENV
                    echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN_PROD }}" >> $GITHUB_ENV
                    echo "KAKAO_REDIRECT_URI=${{ secrets.PROD_KAKAO_REDIRECT_URI }}" >> $GITHUB_ENV
                    echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> $GITHUB_ENV
                    echo "CONTAINER_NAME=websocket-prod" >> $GITHUB_ENV
                    echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> $GITHUB_ENV
                    echo "CONTAINER_PORT=${{ secrets.PROD_PORT }}" >> $GITHUB_ENV
                    echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> $GITHUB_ENV
                  fi

            - name: Deploy to remote server
              uses: appleboy/ssh-action@v0.1.6
              with:
                  host: ${{ secrets.WEBSOCKET_REMOTE_IP }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.WEBSOCKET_REMOTE_PRIVATE_KEY }}
                  port: ${{ secrets.REMOTE_SSH_PORT }}
                  script: |
                      CURRENT_IMAGE=$(docker inspect --format='{{.Config.Image}}' ${{ env.CONTAINER_NAME }} || echo "")
                      docker system prune -a -f --volumes
                      docker pull leticia0408/byeol_gom_websocket:${{ github.ref == 'refs/heads/dev' && 'websocket-dev' || 'websocket-prod' }}
                      docker stop ${{ env.CONTAINER_NAME }} || true
                      docker rm ${{ env.CONTAINER_NAME }} || true
                      if docker run -d --name ${{ env.CONTAINER_NAME }} -p ${{ env.CONTAINER_PORT }}:3000 \
                        -v /var/log/myapp-websocket:/app/logs \
                        -e NODE_ENV="${{ env.NODE_ENV }}" \
                        -e CORS_ORIGIN="${{ env.CORS_ORIGIN }}" \
                        -e KAKAO_REDIRECT_URI="${{ env.KAKAO_REDIRECT_URI }}" \
                        -e DATABASE_URL="${{ env.DATABASE_URL }}" \
                        -e KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" \
                        -e NAVER_REDIRECT_URI="${{ env.NAVER_REDIRECT_URI }}" \
                        -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
                        -e NAVER_REST_API_ID="${{ secrets.NAVER_REST_API_ID }}" \
                        -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
                        -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                        -e ACCESS_TOKEN_SECRET="${{ secrets.ACCESS_TOKEN_SECRET }}" \
                        -e REFRESH_TOKEN_SECRET="${{ secrets.REFRESH_TOKEN_SECRET }}" \
                        -e ACCESS_TOKEN_LIFE="${{ secrets.ACCESS_TOKEN_LIFE }}" \
                        -e REFRESH_TOKEN_LIFE="${{ secrets.REFRESH_TOKEN_LIFE }}" \
                        -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
                        -e SENTRY_DSN="${{ env.SENTRY_DSN }}" \
                        leticia0408/byeol_gom_websocket:${{ github.ref == 'refs/heads/dev' && 'websocket-dev' || 'websocket-prod' }}; then
                        echo "Deployment successful."
                      else
                        echo "Deployment failed, sending Slack notification."
                        curl -X POST -H 'Content-type: application/json' --data '{"text":"ðŸš¨ Deployment failed for ${GITHUB_REPOSITORY} on ${GITHUB_REF}."}' ${{ secrets.SLACK_WEBHOOK_URL }}
                        echo "Rolling back to previous image."
                        docker run -d --name ${{ env.CONTAINER_NAME }} -p ${{ env.CONTAINER_PORT }}:3000 $CURRENT_IMAGE
                      fi
