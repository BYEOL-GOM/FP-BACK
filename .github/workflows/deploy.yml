name: Deploy on Push or Merge

on:
    push:
        branches:
            - dev
            - main

jobs:
    prettier-check:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - run: yarn install --force
            - run: yarn prettier:check

    build-and-push:
        runs-on: ubuntu-latest
        needs: prettier-check
        steps:
            - uses: actions/checkout@v3
            - uses: docker/setup-buildx-action@v2
            - uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - uses: docker/build-push-action@v2
              with:
                  context: .
                  push: true
                  tags: leticia0408/byeol_gom:${{ github.ref == 'refs/heads/dev' && 'latest-dev' || 'latest-prod' }}

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Setup environment variables
              run: |
                  if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
                    echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN_DEV }}" >> $GITHUB_ENV
                    echo "KAKAO_REDIRECT_URI=${{ secrets.DEV_KAKAO_REDIRECT_URI }}" >> $GITHUB_ENV
                    echo "DATABASE_URL=${{ secrets.DEV_DATABASE_URL }}" >> $GITHUB_ENV
                    echo "CONTAINER_NAME=my-app-dev" >> $GITHUB_ENV
                    echo "CONTAINER_PORT=${{ secrets.DEV_PORT }}" >> $GITHUB_ENV
                    echo "NAVER_REDIRECT_URI=${{ secrets.DEV_NAVER_REDIRECT_URI }}" >> $GITHUB_ENV
                    echo "IMAGE_TAG=latest-dev" >> $GITHUB_ENV
                    echo "PREVIOUS_IMAGE_TAG=stable-dev" >> $GITHUB_ENV
                  else
                    echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN_PROD }}" >> $GITHUB_ENV
                    echo "KAKAO_REDIRECT_URI=${{ secrets.PROD_KAKAO_REDIRECT_URI }}" >> $GITHUB_ENV
                    echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> $GITHUB_ENV
                    echo "CONTAINER_NAME=my-app-prod" >> $GITHUB_ENV
                    echo "CONTAINER_PORT=${{ secrets.PROD_PORT }}" >> $GITHUB_ENV
                    echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> $GITHUB_ENV
                    echo "IMAGE_TAG=latest-prod" >> $GITHUB_ENV
                    echo "PREVIOUS_IMAGE_TAG=stable-prod" >> $GITHUB_ENV
                  fi
            - uses: appleboy/ssh-action@v0.1.6
              with:
                  host: ${{ secrets.REMOTE_IP }}
                  username: ${{ secrets.REMOTE_USER }}
                  key: ${{ secrets.REMOTE_PRIVATE_KEY }}
                  port: ${{ secrets.REMOTE_SSH_PORT }}
                  script: |
                      docker system prune -a -f --volumes
                      docker pull leticia0408/byeol_gom:$IMAGE_TAG

                      # Stop and remove old container
                      docker stop $CONTAINER_NAME || true
                      docker rm $CONTAINER_NAME || true

                      # Try to start new container
                      if docker run -d --name $CONTAINER_NAME -p $CONTAINER_PORT:3000 \
                        -e CORS_ORIGIN="$CORS_ORIGIN" \
                        -e KAKAO_REDIRECT_URI="$KAKAO_REDIRECT_URI" \
                        -e DATABASE_URL="$DATABASE_URL" \
                        -e KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" \
                        -e NAVER_REDIRECT_URI="$NAVER_REDIRECT_URI" \
                        -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
                        -e NAVER_REST_API_ID="${{ secrets.NAVER_REST_API_ID }}" \
                        -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
                        -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                        -e ACCESS_TOKEN_SECRET="${{ secrets.ACCESS_TOKEN_SECRET }}" \
                        -e REFRESH_TOKEN_SECRET="${{ secrets.REFRESH_TOKEN_SECRET }}" \
                        -e ACCESS_TOKEN_LIFE="${{ secrets.ACCESS_TOKEN_LIFE }}" \
                        -e REFRESH_TOKEN_LIFE="${{ secrets.REFRESH_TOKEN_LIFE }}" \
                        -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
                        -e SENTRY_DSN="${{ env.SENTRY_DSN }}" \
                        leticia0408/byeol_gom:$IMAGE_TAG; then
                          echo "Deployment successful"
                      else
                          echo "Deployment failed, checking for previous version"
                          if docker pull leticia0408/byeol_gom:$PREVIOUS_IMAGE_TAG; then
                            echo "Rolling back to previous version"
                            docker run -d --name $CONTAINER_NAME -p $CONTAINER_PORT:3000 \
                              -e CORS_ORIGIN="$CORS_ORIGIN" \
                              -e KAKAO_REDIRECT_URI="$KAKAO_REDIRECT_URI" \
                              -e DATABASE_URL="$DATABASE_URL" \
                              -e KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" \
                              -e NAVER_REDIRECT_URI="$NAVER_REDIRECT_URI" \
                              -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
                              -e NAVER_REST_API_ID="${{ secrets.NAVER_REST_API_ID }}" \
                              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
                              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                              -e ACCESS_TOKEN_SECRET="${{ secrets.ACCESS_TOKEN_SECRET }}" \
                              -e REFRESH_TOKEN_SECRET="${{ secrets.REFRESH_TOKEN_SECRET }}" \
                              -e ACCESS_TOKEN_LIFE="${{ secrets.ACCESS_TOKEN_LIFE }}" \
                              -e REFRESH_TOKEN_LIFE="${{ secrets.REFRESH_TOKEN_LIFE }}" \
                              -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
                              -e SENTRY_DSN="${{ env.SENTRY_DSN }}" \
                              leticia0408/byeol_gom:$PREVIOUS_IMAGE_TAG
                          else
                            echo "No previous version available, manual intervention required."
                          fi
                      fi
