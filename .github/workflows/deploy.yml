name: Deploy on Push or Merge

on:
    push:
        branches:
            - dev
            - main

jobs:
    prettier-check:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Install dependencies
              run: yarn install --force
            - name: Check code formatting
              run: yarn prettier:check

    build-and-push:
        runs-on: ubuntu-latest
        needs: prettier-check
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: Build and push Docker image
              uses: docker/build-push-action@v2
              with:
                  context: .
                  push: true
                  tags: leticia0408/byeol_gom:${{ github.ref == 'refs/heads/dev' && 'latest-dev' || 'latest-prod' }}

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
            - name: Setup environment variables
              run: |
                  if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
                    ENV_PREFIX=DEV
                    IMAGE_TAG=latest-dev
                    PREVIOUS_IMAGE_TAG=stable-dev
                  else
                    ENV_PREFIX=PROD
                    IMAGE_TAG=latest-prod
                    PREVIOUS_IMAGE_TAG=stable-prod
                  fi
                  echo "CORS_ORIGIN=${{ secrets.CORS_ORIGIN_$ENV_PREFIX }}" >> $GITHUB_ENV
                  echo "KAKAO_REDIRECT_URI=${{ secrets.${ENV_PREFIX}_KAKAO_REDIRECT_URI }}" >> $GITHUB_ENV
                  echo "DATABASE_URL=${{ secrets.${ENV_PREFIX}_DATABASE_URL }}" >> $GITHUB_ENV
                  echo "CONTAINER_NAME=my-app-$ENV_PREFIX" >> $GITHUB_ENV
                  echo "CONTAINER_PORT=${{ secrets.${ENV_PREFIX}_PORT }}" >> $GITHUB_ENV
                  echo "NAVER_REDIRECT_URI=${{ secrets.NAVER_REDIRECT_URI }}" >> $GITHUB_ENV
                  echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> $GITHUB_ENV
            - name: Deploy to remote server
              run: |
                  rollback() {
                    docker pull leticia0408/byeol_gom:$PREVIOUS_IMAGE_TAG
                    docker run -d --name $CONTAINER_NAME -p $CONTAINER_PORT:3000 \
                      -e CORS_ORIGIN="$CORS_ORIGIN" \
                      -e KAKAO_REDIRECT_URI="$KAKAO_REDIRECT_URI" \
                      -e DATABASE_URL="$DATABASE_URL" \
                      -e KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" \
                      -e NAVER_REDIRECT_URI="$NAVER_REDIRECT_URI" \
                      -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
                      -e NAVER_REST_API_ID="${{ secrets.NAVER_REST_API_ID }}" \
                      -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
                      -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                      -e ACCESS_TOKEN_SECRET="${{ secrets.ACCESS_TOKEN_SECRET }}" \
                      -e REFRESH_TOKEN_SECRET="${{ secrets.REFRESH_TOKEN_SECRET }}" \
                      -e ACCESS_TOKEN_LIFE="${{ secrets.ACCESS_TOKEN_LIFE }}" \
                      -e REFRESH_TOKEN_LIFE="${{ secrets.REFRESH_TOKEN_LIFE }}" \
                      -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
                      -e SENTRY_DSN="${{ env.SENTRY_DSN }}" \
                      leticia0408/byeol_gom:$PREVIOUS_IMAGE_TAG
                  }
                  docker system prune -a -f --volumes
                  echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
                  docker pull leticia0408/byeol_gom:$IMAGE_TAG
                  docker stop $CONTAINER_NAME || true
                  docker rm $CONTAINER_NAME || true
                  if docker run -d --name $CONTAINER_NAME -p $CONTAINER_PORT:3000 \
                    -e CORS_ORIGIN="$CORS_ORIGIN" \
                    -e KAKAO_REDIRECT_URI="$KAKAO_REDIRECT_URI" \
                    -e DATABASE_URL="$DATABASE_URL" \
                    -e KAKAO_REST_API_KEY="${{ secrets.KAKAO_REST_API_KEY }}" \
                    -e NAVER_REDIRECT_URI="$NAVER_REDIRECT_URI" \
                    -e NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}" \
                    -e NAVER_REST_API_ID="${{ secrets.NAVER_REST_API_ID }}" \
                    -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
                    -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                    -e ACCESS_TOKEN_SECRET="${{ secrets.ACCESS_TOKEN_SECRET }}" \
                    -e REFRESH_TOKEN_SECRET="${{ secrets.REFRESH_TOKEN_SECRET }}" \
                    -e ACCESS_TOKEN_LIFE="${{ secrets.ACCESS_TOKEN_LIFE }}" \
                    -e REFRESH_TOKEN_LIFE="${{ secrets.REFRESH_TOKEN_LIFE }}" \
                    -e CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
                    -e SENTRY_DSN="${{ env.SENTRY_DSN }}" \
                    leticia0408/byeol_gom:$IMAGE_TAG; then
                      echo "Deployment successful"
                      docker tag leticia0408/byeol_gom:$IMAGE_TAG leticia0408/byeol_gom:$PREVIOUS_IMAGE_TAG
                      docker push leticia0408/byeol_gom:$PREVIOUS_IMAGE_TAG
                    else
                      echo "Deployment failed, rolling back to previous version"
                      rollback
                  fi
